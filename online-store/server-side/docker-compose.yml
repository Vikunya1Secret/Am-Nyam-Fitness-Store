version: '3.7' # Указывает версию Docker Compose

services: # Начало секции с сервисами
    nest-app:
        build: .
        volumes:
            - ./uploads/products:/app/uploads/products
        ports:
            - '4000:4000'
        depends_on:
            - db
            - client
        networks:
            - backend
        environment:
            DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
            
    db: # Определение сервиса базы данных
        container_name: postgres-1 # Имя контейнера для базы данных
        image: postgres:15.2 # Используемый образ PostgreSQL версии 15.2
        restart: always # Перезапускать контейнер всегда в случае сбоя
        environment: # Переменные окружения для настройки базы данных
            - POSTGRES_USER=${POSTGRES_USER} # Пользователь базы данных
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD} # Пароль пользователя базы данных
            - POSTGRES_DB=${POSTGRES_DB} # Имя базы данных
        ports: # Настройка портов
            - 5432:5432 # Проброс порта 5432 контейнера на порт 5432 хоста
        volumes: # Настройка томов для хранения данных
            - postgres_data:/var/lib/postgresql/data # Хранение данных PostgreSQL в томе postgres_data
        networks: # Настройка сетей
            - backend # Подключение к сети backend

    pgadmin:
        image: dpage/pgadmin4:latest
        container_name: pgadmin-1
        restart: always
        environment:
            PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL} # Логин для доступа к PgAdmin
            PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD} # Пароль для доступа к PgAdmin
        ports:
        - "5050:80"  # Проброс порта для PgAdmin
        networks:
        - backend
    
    client:
        build:
            context: ../client-side
            dockerfile: Dockerfile
        ports:
            - "3000:3000" # Пробрасываем порт для локального доступа
        stdin_open: true
        tty: true
        networks: # Настройка сетей
            - backend # Подключение к сети backend

volumes: # Определение томов
    postgres_data: # Том для хранения данных PostgreSQL

networks: # Определение сетей
    backend: # Сеть для внутреннего взаимодействия сервисов